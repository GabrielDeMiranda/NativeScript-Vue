import { messaging } from '@nativescript/firebase/messaging';
import { Device } from '@nativescript/core';
import { formatKinveyBaasUrl, KinveyHttpRequest, HttpRequestMethod, KinveyHttpAuth, KinveyBaasNamespace } from 'kinvey-js-sdk/lib/http';
export async function register(callback, options = {}) {
    // Init Firebase messaging
    messaging.initFirebaseMessaging(Object.assign({
        showNotifications: true,
        showNotificationsWhenInForeground: true
    }, options));
    // Add the callback
    await messaging.addOnMessageReceivedCallback(callback);
    // Get the device token
    const token = await messaging.getCurrentPushToken();
    // Register device with Kinvey
    const request = new KinveyHttpRequest({
        method: HttpRequestMethod.POST,
        auth: KinveyHttpAuth.Session,
        url: formatKinveyBaasUrl(KinveyBaasNamespace.Push, '/register-device'),
        body: {
            platform: Device.os.toLowerCase(),
            framework: 'nativescript',
            deviceId: token,
            service: 'firebase'
        },
        timeout: options.timeout
    });
    await request.execute();
    // Return the token
    return token;
}
export async function unregister(options = {}) {
    // Get the device token
    const token = await messaging.getCurrentPushToken();
    // Unregister the device on Kinvey
    const request = new KinveyHttpRequest({
        method: HttpRequestMethod.POST,
        auth: KinveyHttpAuth.Session,
        url: formatKinveyBaasUrl(KinveyBaasNamespace.Push, '/unregister-device'),
        body: {
            platform: Device.os.toLowerCase(),
            framework: 'nativescript',
            deviceId: token,
            service: 'firebase'
        },
        timeout: options.timeout
    });
    await request.execute();
    // Unregister for push notifications
    await messaging.unregisterForPushNotifications();
    // Return the token
    return token;
}
//# sourceMappingURL=push.js.map