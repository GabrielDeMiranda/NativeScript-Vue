import { EventEmitter } from 'events';
import { handleOpenURL } from 'nativescript-urlhandler';
import { Color } from '@nativescript/core';
const LOADED_EVENT = 'loaded';
const CLOSED_EVENT = 'closed';
const ERROR_EVENT = 'error';
class SFSafariViewControllerDelegateImpl extends NSObject {
    static new() {
        return super.new();
    }
    static initWithOwnerCallback(owner, callback) {
        let delegate = SFSafariViewControllerDelegateImpl.new();
        delegate._owner = owner;
        delegate._callback = callback;
        return delegate;
    }
    safariViewControllerDidFinish() {
        if (this._callback && typeof this._callback === 'function') {
            this._callback(true);
        }
    }
}
SFSafariViewControllerDelegateImpl.ObjCProtocols = [SFSafariViewControllerDelegate];
export class Popup extends EventEmitter {
    constructor() {
        super(...arguments);
        this._open = false;
        this._viewController = null;
    }
    isClosed() {
        return this._open !== true;
    }
    onLoaded(listener) {
        return this.on(LOADED_EVENT, listener);
    }
    onClosed(listener) {
        return this.on(CLOSED_EVENT, listener);
    }
    onError(listener) {
        return this.on(ERROR_EVENT, listener);
    }
    async open(url = '/', options = {}) {
        // Handle redirect uri
        handleOpenURL((appURL) => {
            this.emit(LOADED_EVENT, { url: appURL.toString() });
        });
        // Create a SafariViewController
        const sfc = SFSafariViewController.alloc().initWithURL(NSURL.URLWithString(url));
        // Toolbar color
        if (options.toolbarColor) {
            sfc.preferredBarTintColor = new Color(options.toolbarColor).ios;
        }
        // Delegate
        sfc.delegate = SFSafariViewControllerDelegateImpl.initWithOwnerCallback(new WeakRef(this), (finish) => {
            if (finish) {
                // Set open to false
                this._open = false;
                // Emit the exit event
                this.emit(CLOSED_EVENT);
            }
        });
        // Show the view controller
        const app = UIApplication.sharedApplication;
        this._viewController = app.keyWindow.rootViewController;
        // Get the topmost view controller
        while (this._viewController.presentedViewController) {
            this._viewController = this._viewController.presentedViewController;
        }
        this._viewController.presentViewControllerAnimatedCompletion(sfc, true, null);
        // Set open to true
        this._open = true;
        // Return this
        return this;
    }
    async close() {
        if (this._open && this._viewController) {
            this._viewController.dismissViewControllerAnimatedCompletion(true, null);
            this._viewController = null;
            this._open = false;
        }
        this.emit(CLOSED_EVENT);
        return this;
    }
    static open(url, options) {
        const popup = new Popup();
        return popup.open(url, options);
    }
}
//# sourceMappingURL=popup.ios.js.map