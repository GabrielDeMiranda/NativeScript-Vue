import { Inject, Injectable } from '@angular/core';
import { init, User } from '../nativescript';
import { KinveyConfigToken } from './utils';
import * as i0 from "@angular/core";
export class UserService {
    constructor(config) {
        init(config);
    }
    exists(username, options) {
        return User.exists(username, options);
    }
    forgotUsername(email, options) {
        return User.forgotUsername(email, options);
    }
    login(username, password, options) {
        return User.login(username, password, options);
    }
    loginWithRedirectUri(redirectUri, options) {
        return User.loginWithRedirectUri(redirectUri, options);
    }
    loginWithMICUsingResourceOwnerCredentials(username, password, options) {
        return User.loginWithMICUsingResourceOwnerCredentials(username, password, options);
    }
    loginWithMIC(redirectUri, authorizationGrant, options) {
        return User.loginWithMIC(redirectUri, authorizationGrant, options);
    }
    logout(options) {
        return User.logout(options);
    }
    lookup(query, options) {
        return User.lookup(query, options);
    }
    me(options) {
        return User.me(options);
    }
    remove(id, options) {
        return User.remove(id, options);
    }
    resetPassword(username, options) {
        return User.resetPassword(username, options);
    }
    restore() {
        return User.restore();
    }
    signup(data, options) {
        return User.signup(data, options);
    }
    signUpWithIdentity() {
        return User.signUpWithIdentity();
    }
    update(data, options) {
        return User.update(data, options);
    }
    getActiveUser() {
        return User.getActiveUser();
    }
    verifyEmail(username, options) {
        return User.verifyEmail(username, options);
    }
    registerForLiveService(options) {
        return User.registerForLiveService(options);
    }
    unregisterFromLiveService(options) {
        return User.unregisterFromLiveService(options);
    }
}
UserService.ɵfac = function UserService_Factory(t) { return new (t || UserService)(i0.ɵɵinject(KinveyConfigToken)); };
UserService.ɵprov = i0.ɵɵdefineInjectable({ token: UserService, factory: UserService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(UserService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [KinveyConfigToken]
            }] }]; }, null); })();
//# sourceMappingURL=user.service.js.map